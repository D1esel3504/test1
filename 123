// Пример объекта для TODO-элемента: 
// const todo = {
//   id: уникальный ID, // Формируется при добавлении TODO элемента
//   name: 'Learn JS', // Название задачи
//   done: true/false // Статус. По умолчанию false
// }

// Функция для формирования уникального идентификатора
function generateUniqID() {
  return Math.random().toString(36).substr(2, 9);
}

// LOCAL STORAGE !!!
let arr = [];
const STORAGE_KEY = 'TODOS';
const btns = document.querySelector('.ui.buttons.tabs');
const btnActive = document.querySelector('.btn--active');
const btnDone = document.querySelector('.btn--done');
const btnAll = document.querySelector('.btn--all');
const input = document.querySelector('.ui.action input');
const btn = document.querySelector('.ui.button');
const todoList = document.querySelector('.list');
const containerList = document.querySelector('.container-list');
const searchInput = document.querySelector('.search');


const deleteTodoButtons = document.getElementsByClassName('negative ui button');

const handleDeleteTodo = (event, id) => {
  const todoElement = event.target.closest('.todo');
  if (confirm ('Вы действительно хотите удалить эту задачу?')) {
    todoElement.remove()
  };
  arr = arr.filter(el => el.id !== id);
  deleteAllList();
  // UPDATE LOCAL STORAGE!!!!
};


const filterTodo = (event) => {
  let copyArr = [...arr];
  copyArr = copyArr.filter(el => el.name.includes(event.target.value));

  const todoElements = document.querySelectorAll('.todo-container');
  for (let iterator of todoElements) {
    if (iterator.querySelector('.text').textContent.toLowerCase().includes(event.target.value.toLowerCase())) {
      iterator.classList.remove('hidden');
    }
    else {
      iterator.classList.add('hidden');
    };
  };

};


const handleEditTodo = (event) => {
  const todoElement = event.target.closest('.todo');
  const todoEditElement = todoElement.nextElementSibling;
  todoElement.classList.add('hidden');
  todoEditElement.classList.remove('hidden');
};

const handleDoneTodo = (event) => {
  const todoElement = event.target.closest('.todo');
  const dataId = todoElement.getAttribute('data-id');
  const elemIndex = arr.findIndex(el => el.id === dataId);
  const editElement = todoElement.querySelector('.circular.ui.icon.button.button-edit');

  arr.splice(elemIndex, 1, {
    ...arr[elemIndex],
    done: !arr[elemIndex].done
  })
  if (event.target.checked) {
    todoElement.classList.add('todo--active');
    editElement.classList.add('hidden');
  }
  else {
    todoElement.classList.remove('todo--active');
    editElement.classList.remove('hidden');
  }
};


const saveEditTodo = (event, inputSave, editName) => {
  const todoEditElement = event.target.closest('.todo--edit');
  const todoElement = todoEditElement.previousElementSibling;
  const dataId = todoElement.getAttribute('data-id');
  const elemIndex = arr.findIndex(el => el.id === dataId);
  arr.splice(elemIndex, 1, {
    ...arr[elemIndex],
    name: inputSave.value
  })
  editName.textContent = inputSave.value;
  todoEditElement.classList.add('hidden');
  todoElement.classList.remove('hidden');
};

const cancelEditTodo = (event) => {
  const todoEditElement = event.target.closest('.todo--edit');
  todoEditElement.classList.add('hidden');
  const todoElement = todoEditElement.previousElementSibling;
  todoElement.classList.remove('hidden')
};

const deleteAllList = () => {
  if (arr.length === 0) {
    containerList.classList.add('hidden');
  };
};

for (const deleteButton of deleteTodoButtons) {
  deleteButton.addEventListener('click', handleDeleteTodo);
};

const getStorageData = () => {
  const data = localStorage.getItem(STORAGE_KEY);
  return JSON.parse(data);
};

const setStorageData = (value) => {
  if (value instanceof Array) {
    localStorage.setItem(STORAGE_KEY, JSON.stringify(value))
  } else {
    alert('Wrong type');
  }
};

// IIFE. Initialize
(() => {
  const data = getStorageData();
  if (!data) {
    setStorageData([]);
  }
})();

const getTodoHTML = ({ id, name, done }) => {
  return `
    <div class="todo todo-container" data-id="${id}">
      <label class="checkbox">
        <input type="checkbox" ${done ? 'checked' : ''} />
        <div class="checkbox-icon"></div>
      </label>
      <span class="text">${name}</span>
      <button class="negative ui button">Удалить</button>
      <button class="circular ui icon button button-edit">
        <i class="icon cog"></i>
      </button>
    </div>
    <div class="todo hidden todo--edit" data-id="${id}">
        <div class="ui small input input-edit">
          <input class="edited-input" type="text" value="${name}" placeholder="Введите новое название...">
        </div>
        <button class="ui positive button small">Сохранить</button>
        <button class="ui button small cancel">Отмена</button>
      </div>
  `;
}


btn.addEventListener('click', () => {
  containerList.classList.remove('hidden');
  const value = input.value;
  const data = {
    id: generateUniqID(),
    name: value,
    done: false
  };
  // LocalStorage?
  arr.push(data);
  const newTodo = getTodoHTML(data);
  todoList.insertAdjacentHTML('afterbegin', newTodo);

  const currentTodo = document.querySelector(`[data-id="${data.id}"]`);
  const currentTodoDeleteButton = currentTodo.querySelector('.negative.ui.button');
  currentTodoDeleteButton.addEventListener('click', (event) => handleDeleteTodo(event, data.id));
  
  const currentTodoEditButton = currentTodo.querySelector('.circular.ui.icon.button.button-edit');
  currentTodoEditButton.addEventListener('click', handleEditTodo);

  const currentEditTodo = document.querySelector(`.todo--edit[data-id="${data.id}"]`);
  const inputSave = currentEditTodo.querySelector('.edited-input');
  const btnSaveEdit = currentEditTodo.querySelector('.ui.positive.button.small');
  const btnCancelEdit = currentEditTodo.querySelector('.ui.button.small.cancel');
  const editName = currentTodo.querySelector('.text');
  const checkbox = document.querySelector('[type="checkbox"]');

  btnSaveEdit.addEventListener('click', (event) => {
    saveEditTodo(event, inputSave, editName);
  });

  btnCancelEdit.addEventListener('click', (event) => {
    cancelEditTodo(event);
  });

  checkbox.addEventListener('change', (event) => {
    handleDoneTodo(event);
  });

  input.value = '';
  setStorageData(arr);
});

btns.addEventListener('click', (event) => {
  const todoElements = document.querySelectorAll('.todo-container');

  if (event.target.classList.contains('btn--active')) {
    btnActive.classList.add('blue');
    btnAll.classList.remove('blue');
    btnDone.classList.remove('blue');

    for (let iterator of todoElements) {
      if (iterator.classList.contains('todo--active')) {
        return iterator.classList.add('hidden');
      }
      else {
        iterator.classList.remove('hidden');
      };
    };
  };
  if (event.target.classList.contains('btn--all')) {
    btnActive.classList.remove('blue');
    btnAll.classList.add('blue');
    btnDone.classList.remove('blue');
    for (let iterator of todoElements) {
      if (iterator) {
        return iterator.classList.remove('hidden');;
      }
    };
  };

  if (event.target.classList.contains('btn--done')) {
    btnDone.classList.add('blue');
    btnAll.classList.remove('blue');
    btnActive.classList.remove('blue');

    for (let iterator of todoElements) {
      if (iterator.classList.contains('todo--active')) {
        return iterator.classList.remove('hidden');
      }
      else {
        iterator.classList.add('hidden');
      };
    };
  };
});

searchInput.addEventListener('input', (event) => {
  filterTodo(event);
});


